{
  "version": 3,
  "sources": ["../../src/data/head.ts", "../../src/data/face.ts", "../../src/data/drawable.ts", "../../src/data/props.ts", "../../src/client/utils/index.ts", "../../src/client/menu/appearance/index.ts", "../../src/client/menu/tattoos/index.ts", "../../src/data/menuTypes.ts", "../../src/client/enums.ts", "../../src/client/camera/index.ts", "../../src/client/menu/index.ts", "../../src/client/menu/appearance/handler.ts", "../../src/client/init.ts"],
  "sourcesContent": ["export default [\r\n    \"Blemishes\",\r\n    \"FacialHair\",\r\n    \"Eyebrows\",\r\n    \"Ageing\",\r\n    \"Makeup\",\r\n    \"Blush\",\r\n    \"Complexion\",\r\n    \"SunDamage\",\r\n    \"Lipstick\",\r\n    \"MolesFreckles\",\r\n    \"ChestHair\",\r\n    \"BodyBlemishes\",\r\n    \"AddBodyBlemishes\",\r\n    \"EyeColor\"\r\n]\r\n", "export default [\r\n    \"Nose_Width\",\r\n    \"Nose_Peak_Height\",\r\n    \"Nose_Peak_Lenght\",\r\n    \"Nose_Bone_Height\",\r\n    \"Nose_Peak_Lowering\",\r\n    \"Nose_Bone_Twist\",\r\n    \"EyeBrown_Height\",\r\n    \"EyeBrown_Forward\",\r\n    \"Cheeks_Bone_High\",\r\n    \"Cheeks_Bone_Width\",\r\n    \"Cheeks_Width\",\r\n    \"Eyes_Openning\",\r\n    \"Lips_Thickness\",\r\n    \"Jaw_Bone_Width\",\r\n    \"Jaw_Bone_Back_Lenght\",\r\n    \"Chin_Bone_Lowering\",\r\n    \"Chin_Bone_Length\",\r\n    \"Chin_Bone_Width\",\r\n    \"Chin_Hole\",\r\n    \"Neck_Thikness\"\r\n]\r\n", "export default [\r\n    \"face\",\r\n    \"masks\",\r\n    \"hair\",\r\n    \"torsos\",\r\n    \"legs\",\r\n    \"bags\",\r\n    \"shoes\",\r\n    \"neck\",\r\n    \"shirts\",\r\n    \"vest\",\r\n    \"decals\",\r\n    \"jackets\"\r\n]\r\n", "export default [\r\n    \"hats\",\r\n    \"glasses\",\r\n    \"earrings\",\r\n    \"mouth\",\r\n    \"lhand\",\r\n    \"rhand\",\r\n    \"watches\",\r\n    \"braclets\"\r\n]\r\n", "export const debugdata = (data: any) => {\r\n    console.log(JSON.stringify(data, (key, value) => {\r\n        if (typeof value === \"string\") {\r\n            return value.replace(/\\n/g, \"\\\\n\");\r\n        }\r\n        return value;\r\n    }, 2))\r\n}\r\n\r\nexport const sendNUIEvent = (action: string, data: any) => {\r\n    SendNUIMessage({\r\n        action: action,\r\n        data: data\r\n    });\r\n}\r\n\r\nexport const delay = (ms: number) => new Promise(res => setTimeout(res, ms));\r\n\r\nexport const requestModel = async (model: string | number): Promise<number> => {\r\n    let modelHash: number = typeof model === 'number' ? model : GetHashKey(model)\r\n\r\n    if (!IsModelValid(modelHash)) {\r\n        exports.bl_bridge.notify()({\r\n            title: 'Invalid model!',\r\n            type: 'error',\r\n            duration: 1000\r\n        })\r\n\r\n        throw new Error(`attempted to load invalid model '${model}'`);\r\n    }\r\n\r\n    if (HasModelLoaded(modelHash)) return modelHash\r\n    \r\n    RequestModel(modelHash);\r\n\r\n    const waitForModelLoaded = (): Promise<void> => {\r\n        return new Promise(resolve => {\r\n            const interval = setInterval(() => {\r\n                if (HasModelLoaded(modelHash)) {\r\n                    clearInterval(interval);\r\n                    resolve();\r\n                }\r\n            }, 100);\r\n        });\r\n    };\r\n\r\n    await waitForModelLoaded();\r\n\r\n    return modelHash;\r\n};\r\n\r\n\r\n//callback\r\n//https://github.com/overextended/ox_lib/blob/master/package/client/resource/callback/index.ts\r\n\r\nconst resourceName = GetCurrentResourceName()\r\nconst eventTimers: Record<string, number> = {};\r\nconst activeEvents: Record<string, (...args: any[]) => void> = {};\r\n\r\nfunction eventTimer(eventName: string, delay: number | null) {\r\n    if (delay && delay > 0) {\r\n        const currentTime = GetGameTimer();\r\n\r\n        if ((eventTimers[eventName] || 0) > currentTime) return false;\r\n\r\n        eventTimers[eventName] = currentTime + delay;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nonNet(`__ox_cb_${resourceName}`, (key: string, ...args: any) => {\r\n    const resolve = activeEvents[key];\r\n    return resolve && resolve(...args);\r\n});\r\n\r\nexport function triggerServerCallback<T = unknown>(\r\n    eventName: string,\r\n    delay: number | null,\r\n    ...args: any\r\n): Promise<T> | void {\r\n    if (!eventTimer(eventName, delay)) {\r\n        return;\r\n    }\r\n\r\n    let key: string;\r\n\r\n    do {\r\n        key = `${eventName}:${Math.floor(Math.random() * (100000 + 1))}`;\r\n    } while (activeEvents[key]);\r\n\r\n    emitNet(`__ox_cb_${eventName}`, resourceName, key, ...args);\r\n\r\n    return new Promise<T>((resolve) => {\r\n        activeEvents[key] = resolve;\r\n    });\r\n};\r\n\r\n//locale\r\nconst currentLan = 'br'\r\n\r\nexport const requestLocale = (resourceSetName: string) => {\r\n    return new Promise((resolve) => {\r\n        const checkResourceFile = () => {\r\n            if (RequestResourceFileSet(resourceSetName)) {\r\n                let localeFileContent = LoadResourceFile(resourceName, `locale/${currentLan}.json`);\r\n                if (!localeFileContent) {\r\n                    console.error(`${currentLan}.json not found in locale, please verify!, we used english for now!`)\r\n                    localeFileContent = LoadResourceFile(resourceName, `locale/en.json`)\r\n                }\r\n                resolve(localeFileContent);\r\n            } else {\r\n                setTimeout(checkResourceFile, 100);\r\n            }\r\n        }\r\n        checkResourceFile();\r\n    });\r\n}\r\n\r\nexport const locale = async (id: string, ...args: string[]) => {\r\n    const locale = await requestLocale('locale');\r\n    let argIndex = 0;\r\n\r\n    const result = locale[id].replace(/%s/g, (match: string) => argIndex < args.length ? args[argIndex] : match);\r\n    return result\r\n}\r\n", "import HEAD_OVERLAYS from '../../../data/head';\r\nimport FACE_FEATURES from '../../../data/face';\r\nimport DRAWABLE_NAMES from '../../../data/drawable';\r\nimport PROP_NAMES from '../../../data/props';\r\nimport { HairData, PedHandle, TotalData, DrawableData, HeadStructureData, HeadOverlayData, TAppearance } from '@dataTypes/appearance';\r\nimport { TTattoo } from '@dataTypes/tattoos';\r\nimport {ped} from '..';\r\nimport { triggerServerCallback } from '@utils'\r\n\r\nconst findModelIndex = (model: PedHandle) => exports.bl_appearance.models().findIndex((ped: string) => GetHashKey(ped) === model);\r\n\r\nconst getPedHair = (): HairData => ({\r\n    color: GetPedHairColor(ped),\r\n    highlight: GetPedHairHighlightColor(ped)\r\n});\r\n\r\nconst getPedHeadBlendData = () => {\r\n    const headblendData = exports.bl_appearance.GetHeadBlendData(ped)\r\n\r\n    return {\r\n        shapeFirst: headblendData.FirstFaceShape,   // father\r\n        shapeSecond: headblendData.SecondFaceShape, // mother\r\n        shapeThird: headblendData.ThirdFaceShape,\r\n\r\n        skinFirst: headblendData.FirstSkinTone,\r\n        skinSecond: headblendData.SecondSkinTone,\r\n        skinThird: headblendData.ThirdSkinTone,\r\n\r\n        shapeMix: headblendData.ParentFaceShapePercent, // resemblance\r\n\r\n        thirdMix: headblendData.ParentThirdUnkPercent,\r\n        skinMix: headblendData.ParentSkinTonePercent,   // skinpercent\r\n\r\n        hasParent: headblendData.IsParentInheritance,\r\n    };\r\n};\r\n\r\nconst getHeadOverlay = (): [Record<string, HeadOverlayData>, Record<string, number>] => {\r\n    let totals: Record<string, number> = {};\r\n    let headData: Record<string, HeadOverlayData> = {};\r\n\r\n    for (let i = 0; i < HEAD_OVERLAYS.length; i++) {\r\n        const overlay = HEAD_OVERLAYS[i];\r\n        totals[overlay] = GetNumHeadOverlayValues(i);\r\n\r\n        if (overlay === \"EyeColor\") {\r\n            headData[overlay] = {\r\n                id: overlay,\r\n                index: i,\r\n                overlayValue: GetPedEyeColor(ped)\r\n            };\r\n        } else {\r\n            const [_, overlayValue, colourType, firstColor, secondColor, overlayOpacity] = GetPedHeadOverlayData(ped, i);\r\n            headData[overlay] = {\r\n                id: overlay,\r\n                index: i - 1,\r\n                overlayValue: overlayValue === 255 ? -1 : overlayValue,\r\n                colourType: colourType,\r\n                firstColor: firstColor,\r\n                secondColor: secondColor,\r\n                overlayOpacity: overlayOpacity\r\n            };\r\n        }\r\n    }\r\n\r\n    return [headData, totals];\r\n};\r\n\r\nconst getHeadStructure = (): Record<string, HeadStructureData> | undefined => {\r\n    const pedModel = GetEntityModel(ped)\r\n\r\n    if (pedModel !== GetHashKey(\"mp_m_freemode_01\") && pedModel !== GetHashKey(\"mp_f_freemode_01\")) return\r\n\r\n    let faceStruct = {}\r\n    for (let i = 0; i < FACE_FEATURES.length; i++) {\r\n        const overlay = FACE_FEATURES[i]\r\n        faceStruct[overlay] = {\r\n            id: overlay,\r\n            index: i,\r\n            value: GetPedFaceFeature(ped, i)\r\n        }\r\n    }\r\n\r\n    return faceStruct\r\n}\r\n\r\nconst getDrawables = (): [Record<string, DrawableData>, Record<string, TotalData>] => {\r\n    let drawables = {}\r\n    let totalDrawables = {}\r\n\r\n    for (let i = 0; i < DRAWABLE_NAMES.length; i++) {\r\n        const name = DRAWABLE_NAMES[i]\r\n        const current = GetPedDrawableVariation(ped, i)\r\n\r\n        totalDrawables[name] = {\r\n            id: name,\r\n            index: i,\r\n            total: GetNumberOfPedDrawableVariations(ped, i),\r\n            textures: GetNumberOfPedTextureVariations(ped, i, current)\r\n        }\r\n        drawables[name] = {\r\n            id: name,\r\n            index: i,\r\n            value: GetPedDrawableVariation(ped, i),\r\n            texture: GetPedTextureVariation(ped, i)\r\n        }\r\n    }\r\n\r\n    return [drawables, totalDrawables]\r\n}\r\n\r\nconst getProps = (): [Record<string, DrawableData>, Record<string, TotalData>] => {\r\n    let props = {}\r\n    let totalProps = {}\r\n\r\n    for (let i = 0; i < PROP_NAMES.length; i++) {\r\n        const name = PROP_NAMES[i]\r\n        const current = GetPedPropIndex(ped, i)\r\n\r\n        totalProps[name] = {\r\n            id: name,\r\n            index: i,\r\n            total: GetNumberOfPedPropDrawableVariations(ped, i),\r\n            textures: GetNumberOfPedPropTextureVariations(ped, i, current)\r\n        }\r\n\r\n        props[name] = {\r\n            id: name,\r\n            index: i,\r\n            value: GetPedPropIndex(ped, i),\r\n            texture: GetPedPropTextureIndex(ped, i)\r\n        }\r\n    }\r\n\r\n    return [props, totalProps]\r\n}\r\n\r\nexport default async (model: number): Promise<TAppearance> => {\r\n    const [headData, totals] = getHeadOverlay()\r\n    const [drawables, drawTotal] = getDrawables()\r\n    const [props, propTotal] = getProps()\r\n    const config = exports.bl_appearance.config()\r\n\r\n    return {\r\n        modelIndex: findModelIndex(model),\r\n        model: model,\r\n        hairColor: getPedHair(),\r\n        headBlend: getPedHeadBlendData(),\r\n        headOverlay: headData,\r\n        headOverlayTotal: totals,\r\n        headStructure: getHeadStructure(),\r\n        drawables: drawables,\r\n        props: props,\r\n        tattoos: await triggerServerCallback<TTattoo[]>('bl_appearance:server:getTattoos', 1, config.useBridge ? exports.bl_bridge.core && exports.bl_bridge.core().getPlayerData().cid : null) as TTattoo[],\r\n        drawTotal: drawTotal,\r\n        propTotal: propTotal,\r\n    }\r\n}", "import { ped } from './../'\r\nimport { TZoneTattoo } from '@dataTypes/tattoos';\r\nimport { debugdata } from '@utils';\r\n\r\nconst getTattoos = (): TZoneTattoo[] => {\r\n    const [TATTOO_LIST, TATTOO_CATEGORIES] = exports.bl_appearance.tattoos()\r\n    const tattooZones: TZoneTattoo[] = [];\r\n\r\n    for (let i = 0; i < TATTOO_CATEGORIES.length; i++) {\r\n        const category = TATTOO_CATEGORIES[i];\r\n\r\n        const index = category.index\r\n        const zone = category.zone\r\n        const label = category.label\r\n\r\n        tattooZones[index] = {\r\n            zone,\r\n            label,\r\n            zoneIndex: index,\r\n            dlcs: [],\r\n        };\r\n\r\n        for (let j = 0; j < TATTOO_LIST.length; j++) {\r\n            const dlcData = TATTOO_LIST[j];\r\n            tattooZones[index].dlcs[j] = {\r\n                label: dlcData.dlc,\r\n                dlcIndex: j,\r\n                tattoos: [],\r\n            };\r\n        }\r\n    }\r\n\r\n    const isFemale = GetEntityModel(ped) === GetHashKey('mp_f_freemode_01');\r\n\r\n    for (let dlcIndex = 0; dlcIndex < TATTOO_LIST.length; dlcIndex++) {\r\n        const data = TATTOO_LIST[dlcIndex];\r\n        const { dlc, tattoos } = data;\r\n        const dlcHash = GetHashKey(dlc);\r\n        const tattooDataList = tattoos || [];\r\n\r\n        for (let i = 0; i < tattooDataList.length; i++) {\r\n            const tattooData = tattooDataList[i];\r\n            let tattoo: string | null = null;\r\n\r\n            const lowerTattoo = tattooData.toLowerCase();\r\n            const isFemaleTattoo = lowerTattoo.includes('_f');\r\n\r\n            if (isFemaleTattoo && isFemale) {\r\n                tattoo = tattooData;\r\n            } else if (!isFemaleTattoo && !isFemale) {\r\n                tattoo = tattooData;\r\n            }\r\n\r\n            if (tattoo) {\r\n                const hash = GetHashKey(tattoo);\r\n                const zone = GetPedDecorationZoneFromHashes(dlcHash, hash);\r\n\r\n                if (zone !== -1 && hash) {\r\n                    const zoneTattoos = tattooZones[zone].dlcs[dlcIndex].tattoos;\r\n\r\n                    zoneTattoos.push({\r\n                        label: tattoo,\r\n                        hash,\r\n                        zone,\r\n                        dlc,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return tattooZones;\r\n}\r\n\r\nexport default getTattoos", "export default ['heritage', 'hair', 'clothes', 'accessories', 'face', 'makeup', 'outfits', 'tattoos']\r\n", "export enum send {\r\n    visible = 'appearance:visible',\r\n    data = 'appearance:data',\r\n}\r\n\r\nexport enum appearance {\r\n    setModel = 'appearance:setModel',\r\n    setHeadStructure = 'appearance:setHeadStructure',\r\n    setHeadOverlay = 'appearance:setHeadOverlay',\r\n    setHeadBlend = 'appearance:setHeadBlend',\r\n    setProp = 'appearance:setProp',\r\n    setDrawable = 'appearance:setDrawable',\r\n    setTattoos = 'appearance:setTattoos',\r\n    getModelTattoos = 'appearance:getModelTattoos',\r\n}\r\n\r\nexport enum receive {\r\n    close = 'appearance:close',\r\n\r\n    toggleItem = 'appearance:toggleItem',\r\n\r\n    useOutfit = 'appearance:useOutfit',\r\n    renameOutfit = 'appearance:renameOutfit',\r\n    deleteOutfit = 'appearance:deleteOutfit',\r\n    saveOutfit = 'appearance:saveOutfit',\r\n\r\n    save = 'appearance:save',\r\n    cancel = 'appearance:cancel',\r\n\r\n    camZoom = 'appearance:camZoom',\r\n    camMove = 'appearance:camMove',\r\n    camScroll = 'appearance:camScroll',\r\n}\r\n", "import { Camera, Vector3, CameraBones } from '@dataTypes/camera';\r\nimport {ped} from './../menu';\r\nimport { delay} from '../utils';\r\nimport { receive } from '@enums';\r\n\r\nlet running: boolean = false;\r\nlet camDistance: number = 1.8;\r\nlet cam: Camera | null = null;\r\nlet angleY: number = 0.0;\r\nlet angleZ: number = 0.0;\r\nlet targetCoords: Vector3 | null = null;\r\nlet oldCam: Camera | null = null;\r\nlet changingCam: boolean = false;\r\nlet lastX: number = 0;\r\nlet currentBone: keyof CameraBones = 'head'\r\n\r\nconst CameraBones: CameraBones = {\r\n    head: 31086,\r\n    torso: 24818,\r\n    legs: 14201,\r\n};\r\n\r\nconst cos = (degrees: number): number => {\r\n    return Math.cos((degrees * Math.PI) / 180);\r\n}\r\n\r\nconst sin = (degrees: number): number => {\r\n    return Math.sin((degrees * Math.PI) / 180);\r\n}\r\n\r\nconst getAngles = (): number[] => {\r\n    const x =((cos(angleZ) * cos(angleY)) + (cos(angleY) * cos(angleZ))) / 2 * camDistance;\r\n    const y = ((sin(angleZ) * cos(angleY)) + (cos(angleY) * sin(angleZ))) / 2 * camDistance;\r\n    const z = sin(angleY) * camDistance;\r\n\r\n    return [x, y, z]\r\n}\r\n\r\n\r\nconst setCamPosition = (mouseX?: number, mouseY?: number): void => {\r\n    if (!running || !targetCoords || changingCam) return;\r\n\r\n    mouseX = mouseX ?? 0.0;\r\n    mouseY = mouseY ?? 0.0;\r\n\r\n    angleZ -= mouseX;\r\n    angleY += mouseY;\r\n    angleY = Math.min(Math.max(angleY, 0.0), 89.0);\r\n\r\n    const [x, y, z] = getAngles()\r\n\r\n    SetCamCoord(cam, targetCoords.x + x, targetCoords.y + y, targetCoords.z + z)\r\n    PointCamAtCoord(cam, targetCoords.x, targetCoords.y, targetCoords.z)\r\n}\r\n\r\nconst moveCamera = async (coords: Vector3, distance?: number) => {\r\n    const heading: number = GetEntityHeading(ped) + 94;\r\n    distance = distance ?? 1.0;\r\n\r\n    changingCam = true;\r\n    camDistance = distance;\r\n    angleZ = heading;\r\n\r\n    const [x, y, z] = getAngles()\r\n\r\n    const newcam: Camera = CreateCamWithParams(\r\n        \"DEFAULT_SCRIPTED_CAMERA\",\r\n        coords.x + x,\r\n        coords.y + y,\r\n        coords.z + z,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        70.0,\r\n        false,\r\n        0\r\n    );\r\n\r\n    targetCoords = coords;\r\n    changingCam = false;\r\n    oldCam = cam\r\n    cam = newcam;\r\n\r\n    PointCamAtCoord(newcam, coords.x, coords.y, coords.z);\r\n    SetCamActiveWithInterp(newcam, oldCam, 250, 0, 0);\r\n\r\n    await delay(250)\r\n\r\n    SetCamUseShallowDofMode(newcam, true);\r\n    SetCamNearDof(newcam, 0.4);\r\n    SetCamFarDof(newcam, 1.2);\r\n    SetCamDofStrength(newcam, 0.3);\r\n    useHiDof(newcam);\r\n\r\n    DestroyCam(oldCam, true);\r\n}\r\n\r\nconst useHiDof = (currentcam: Camera) => {\r\n    if (!(DoesCamExist(cam) && currentcam == cam)) return;\r\n    SetUseHiDof();\r\n    setTimeout(useHiDof, 0);\r\n}\r\n\r\nexport const startCamera = async () => {\r\n    if (running) return;\r\n    running = true;\r\n    camDistance = 1.0;\r\n    cam = CreateCam(\"DEFAULT_SCRIPTED_CAMERA\", true);\r\n    const [x, y, z]: number[] = GetPedBoneCoords(ped, 31086, 0.0, 0.0, 0.0)\r\n    SetCamCoord(cam, x, y, z)\r\n    RenderScriptCams(true, true, 1000, true, true);\r\n    moveCamera({x: x, y: y, z: z}, camDistance);\r\n}\r\n\r\nexport const stopCamera = (): void => {\r\n    if (!running) return;\r\n    running = false;\r\n\r\n    RenderScriptCams(false, true, 250, true, false);\r\n    DestroyCam(cam, true);\r\n    cam = null;\r\n    targetCoords = null;\r\n}\r\n\r\nconst setCamera = (type?: keyof CameraBones): void => {\r\n    const bone: number | undefined = CameraBones[type];\r\n    if (currentBone == type) return;\r\n    const [x, y, z]: number[] = bone ? GetPedBoneCoords(ped, bone, 0.0, 0.0, bone === 14201 ? 0.2 : 0.0) : GetEntityCoords(ped, false);\r\n\r\n    moveCamera({\r\n        x: x, \r\n        y: y, \r\n        z: z + 0.0\r\n    }, 1.0);\r\n\r\n    currentBone = type;\r\n}\r\n\r\nRegisterNuiCallback(receive.camMove, (data, cb) => {\r\n    cb(1)\r\n    let heading: number = GetEntityHeading(ped);\r\n    if (lastX == data.x) {\r\n        return;\r\n    }\r\n    heading = data.x > lastX ? heading + 5 : heading - 5;\r\n    SetEntityHeading(ped, heading);\r\n});\r\n\r\nRegisterNuiCallback(receive.camScroll, (type: number, cb: Function) => {\r\n    switch (type) {\r\n        case 2:\r\n            setCamera();\r\n            break;\r\n        case 1:\r\n            setCamera(\"legs\");\r\n            break;\r\n        case 3:\r\n            setCamera(\"head\");\r\n            break;\r\n    }\r\n    cb(1);\r\n});\r\n\r\nRegisterNuiCallback(receive.camZoom, (data, cb) => {\r\n    if (data === \"down\") {\r\n        const newDistance: number = camDistance + 0.05;\r\n        camDistance = newDistance >= 1.0 ? 1.0 : newDistance;\r\n    } else if (data === \"up\") {\r\n        const newDistance: number = camDistance - 0.05;\r\n        camDistance = newDistance <= 0.35 ? 0.35 : newDistance;\r\n    }\r\n\r\n    camDistance = camDistance;\r\n    setCamPosition();\r\n    cb(1);\r\n});\r\n\r\n", "import getAppearance from './appearance'\r\nimport getTattoos from './tattoos'\r\nimport { TAppearance} from '@dataTypes/appearance';\r\nimport { TTattoo} from '@dataTypes/tattoos';\r\nimport menuTypes from '../../data/menuTypes';\r\nimport { send, receive } from '@enums'\r\nimport { sendNUIEvent, delay, requestLocale, requestModel } from '../utils'\r\nimport { startCamera, stopCamera } from './../camera'\r\n\r\nexport let playerAppearance: TAppearance | null = null\r\n\r\nconst bl_appearance = exports.bl_appearance\r\nexport let isMenuOpen = false\r\nexport let ped = 0\r\n\r\nconst updatePed = () => {\r\n    if (!isMenuOpen) return;\r\n    ped = PlayerPedId()\r\n    setTimeout(updatePed, 100);\r\n}\r\n\r\nconst validMenuTypes = (type: string[]) => {\r\n    for (let i = 0; i < type.length; i++) {\r\n        if (!menuTypes.includes(type[i])) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const openMenu = async (type: string[] | string) => {\r\n    isMenuOpen = true\r\n    updatePed()\r\n    await delay(150)\r\n    startCamera()\r\n    sendNUIEvent(send.visible, true)\r\n    SetNuiFocus(true, true)\r\n    const isArray = typeof type !== 'string'\r\n\r\n    if (isArray && !validMenuTypes(type)) {\r\n        return console.error('Error: menu type not found');\r\n    }\r\n\r\n    const appearance = await getAppearance(GetEntityModel(ped))\r\n    playerAppearance = appearance\r\n\r\n    sendNUIEvent(send.data, {\r\n        tabs: isArray ? type : menuTypes.includes(type) ? type : menuTypes,\r\n        appearance: appearance,\r\n        blacklist: bl_appearance.blacklist(),\r\n        tattoos: getTattoos(),\r\n        outfits: [],\r\n        models: bl_appearance.models(),\r\n        locale: await requestLocale('locale')\r\n    })\r\n}\r\n\r\nconst resetAppearance = async () => {\r\n    const model = playerAppearance.model\r\n    const modelHash = await requestModel(model)\r\n    console.log(modelHash)\r\n\r\n    SetPlayerModel(PlayerId(), modelHash)\r\n\r\n    await delay(150)\r\n\r\n    SetModelAsNoLongerNeeded(modelHash)\r\n    SetPedDefaultComponentVariation(ped)\r\n\r\n    if (model === GetHashKey(\"mp_m_freemode_01\")) SetPedHeadBlendData(ped, 0, 0, 0, 0, 0, 0, 0, 0, 0, false)\r\n    else if (model === GetHashKey(\"mp_f_freemode_01\")) SetPedHeadBlendData(ped, 45, 21, 0, 20, 15, 0, 0.3, 0.1, 0, false)\r\n\r\n    const headBlend = playerAppearance.headBlend\r\n    if (headBlend) SetPedHeadBlendData(ped, headBlend.shapeFirst, headBlend.shapeSecond, headBlend.shapeThird, headBlend.skinFirst, headBlend.skinSecond, headBlend.skinThird, headBlend.shapeMix, headBlend.skinMix, headBlend.thirdMix, headBlend.hasParent)\r\n\r\n    if (playerAppearance.headStructure) for (const data of Object.values(playerAppearance.headStructure)) {\r\n        SetPedFaceFeature(ped, data.index, data.value)\r\n    }\r\n\r\n    if (playerAppearance.drawables) for (const data of Object.values(playerAppearance.drawables)) {\r\n        SetPedComponentVariation(ped, data.index, data.value, data.texture, 0)\r\n    }\r\n\r\n    if (playerAppearance.props) for (const data of Object.values(playerAppearance.props)) {\r\n        if (data.value === -1) {\r\n            ClearPedProp(ped, data.index)\r\n            return 1\r\n        }\r\n        SetPedPropIndex(ped, data.index, data.value, data.texture, false)\r\n    }\r\n\r\n    if (playerAppearance.hairColor) {\r\n        SetPedHairColor(ped, playerAppearance.hairColor.color, playerAppearance.hairColor.highlight) \r\n    }\r\n\r\n    if (playerAppearance.headOverlay) for (const data of Object.values(playerAppearance.headOverlay)) {\r\n        const value = data.overlayValue == -1 ? 255 : data.overlayValue\r\n\r\n        if (data.id === 'EyeColor') SetPedEyeColor(ped, value) \r\n        else {\r\n            SetPedHeadOverlay(ped, data.index, value, data.overlayOpacity)\r\n            SetPedHeadOverlayColor(ped, data.index, 1, data.firstColor, data.secondColor)\r\n        }\r\n    }\r\n\r\n    if (playerAppearance.tattoos) {\r\n        ClearPedDecorationsLeaveScars(ped)\r\n        for (const element of playerAppearance.tattoos) {\r\n            const tattoo = element.tattoo\r\n            if (tattoo) {\r\n                AddPedDecorationFromHashes(ped, GetHashKey(tattoo.dlc), tattoo.hash)\r\n            }\r\n        }  \r\n    }\r\n}\r\n\r\nexport const closeMenu = async (save: boolean) => {\r\n    if (!save) resetAppearance()\r\n    else {\r\n        const config = exports.bl_appearance.config()\r\n        const appearance = await getAppearance(GetEntityModel(ped))\r\n        emitNet(\"bl_appearance:server:saveAppearances\", {\r\n            id: config.useBridge ? exports.bl_bridge.core && exports.bl_bridge.core().getPlayerData().cid : null,\r\n\r\n            skin: {\r\n                headBlend: appearance.headBlend,\r\n                headStructure: appearance.headStructure,\r\n                headOverlay: appearance.headOverlay,\r\n                hairColor: appearance.hairColor,\r\n                model: appearance.model,\r\n            },\r\n            clothes: {\r\n                drawables: appearance.drawables,\r\n                props: appearance.props,\r\n                headOverlay: appearance.headOverlay,\r\n            },\r\n            tattoos: playerAppearance.currentTattoos || [],\r\n            outfits: []\r\n        });\r\n    }\r\n\r\n    stopCamera()\r\n    isMenuOpen = false\r\n    SetNuiFocus(false, false)\r\n    sendNUIEvent(send.visible, false)\r\n}\r\n\r\nRegisterNuiCallback(receive.close, (save: boolean, cb: Function) => {\r\n    cb(1)\r\n    closeMenu(save)\r\n});", "import { appearance } from '@enums';\r\nimport { debugdata, requestModel, delay} from '../../utils';\r\nimport { HeadOverlayData, HeadStructureData, DrawableData} from '@dataTypes/appearance';\r\nimport { TTattoo} from '@dataTypes/tattoos';\r\nimport getAppearance from '.'\r\nimport {ped, playerAppearance} from './../'\r\n\r\nimport {THeadBlend} from '@dataTypes/appearance'\r\n\r\nconst actionHandlers = {\r\n    [appearance.setModel]: async (model: string) => {\r\n        const modelHash = await requestModel(model)\r\n\r\n        SetPlayerModel(PlayerId(), modelHash)\r\n\r\n        await delay(150)\r\n\r\n        SetModelAsNoLongerNeeded(modelHash)\r\n        SetPedDefaultComponentVariation(ped)\r\n\r\n        if (model === \"mp_m_freemode_01\") SetPedHeadBlendData(ped, 0, 0, 0, 0, 0, 0, 0, 0, 0, false)\r\n        else if (model === \"mp_f_freemode_01\") SetPedHeadBlendData(ped, 45, 21, 0, 20, 15, 0, 0.3, 0.1, 0, false)\r\n\r\n        return getAppearance(modelHash)\r\n    },\r\n    [appearance.setHeadStructure]: (data: HeadStructureData) => {\r\n        SetPedFaceFeature(ped, data.index, data.value)\r\n        return data\r\n    },\r\n    [appearance.setHeadOverlay]: (data: HeadOverlayData) => {\r\n        const value = data.overlayValue == -1 ? 255 : data.overlayValue\r\n\r\n        if (data.id === 'EyeColor') SetPedEyeColor(ped, data.eyeColor) \r\n        else if (data.id === 'hairColor') SetPedHairColor(ped, data.hairColor, data.hairHighlight) \r\n        else {\r\n            SetPedHeadOverlay(ped, data.index, value, data.overlayOpacity)\r\n            SetPedHeadOverlayColor(ped, data.index, 1, data.firstColor, data.secondColor)\r\n        }\r\n\r\n        return 1\r\n    },\r\n    [appearance.setHeadBlend]: (data: THeadBlend) => {\r\n        SetPedHeadBlendData(\r\n            ped, \r\n            data.shapeFirst, \r\n            data.shapeSecond, \r\n            data.shapeThird, \r\n            data.skinFirst, \r\n            data.skinSecond, \r\n            data.skinThird, \r\n            data.shapeMix, \r\n            data.skinMix, \r\n            data.thirdMix, \r\n            data.hasParent\r\n        )\r\n        return 1\r\n    },\r\n    [appearance.setProp]: (data: DrawableData) => {\r\n        if (data.value === -1) {\r\n            ClearPedProp(ped, data.index)\r\n            return 1\r\n        }\r\n        SetPedPropIndex(ped, data.index, data.value, data.texture, false)\r\n        return data.isTexture ? 1 : GetNumberOfPedPropTextureVariations(ped, data.index, data.value) // if it texture why we would call a useless native \r\n    },\r\n    [appearance.setDrawable]: (data: DrawableData) => {\r\n        SetPedComponentVariation(ped, data.index, data.value, data.texture, 0)\r\n\r\n        return data.isTexture ? 1 : GetNumberOfPedTextureVariations(ped, data.index, data.value)-1\r\n    },\r\n    [appearance.setTattoos]: (data: TTattoo[]) => {\r\n        if (!data) return 1\r\n\r\n        playerAppearance.currentTattoos = data\r\n        ClearPedDecorationsLeaveScars(ped)\r\n\r\n        for (const element of data) {\r\n            const tattoo = element.tattoo\r\n            if (tattoo) {\r\n                AddPedDecorationFromHashes(ped, GetHashKey(tattoo.dlc), tattoo.hash)\r\n            }\r\n        }\r\n        \r\n        return 1\r\n    },\r\n    [appearance.getModelTattoos]: (data: any) => {\r\n        return data\r\n    },\r\n};\r\n\r\nfor (const action of Object.values(appearance)) {\r\n    RegisterNuiCallback(action, async (data: any, cb: Function) => {\r\n        const handler = actionHandlers[action];\r\n        if (!handler) return\r\n\r\n        cb(await handler(data))\r\n    });\r\n}\r\n", "import { openMenu } from './menu'\r\nimport { triggerServerCallback } from '@utils'\r\nimport('./menu/appearance/handler')\r\n\r\nRegisterCommand('openMenu', () => {\r\n  openMenu('all')\r\n}, false)\r\n\r\nsetTimeout(async () => {\r\n  const args = [1, null, 3, null, null, 6];\r\n  const response = await triggerServerCallback<{ serverValue: number }>('test:server', 1, args);\r\n  if (!response) return;\r\n}, 100);\r\n\r\n// function Export_GetPedHeadBlendData() {\r\n//     var arr = new Uint32Array(new ArrayBuffer(10 * 8)); // int, int, int, int, int, int, float, float, float, bool\r\n//     Citizen.invokeNative(\"0x2746BD9D88C5C5D0\", PlayerPedId(), arr);\r\n//     return JSON.stringify(arr);\r\n// }\r\n\r\n// RegisterCommand('head', () => {\r\n//     // const data = Export_GetPedHeadBlendData()\r\n//     // console.log(data)\r\n// }, false)\r\n"],
  "mappings": "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",
  "names": ["delay", "ped", "appearance", "appearance"]
}
