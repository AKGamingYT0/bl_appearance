{
  "version": 3,
  "sources": ["../../src/server/utils/index.ts", "../../node_modules/.pnpm/@overextended+oxmysql@1.3.0/node_modules/@overextended/oxmysql/MySQL.ts", "../../src/server/appearance.ts", "../../src/server/migrate/esx.ts", "../../src/server/migrate/fivem.ts", "../../src/server/migrate/illenium.ts", "../../src/server/migrate/qb.ts", "../../src/server/init.ts"],
  "sourcesContent": ["//https://github.com/overextended/ox_lib/blob/master/package/server/resource/callback/index.ts\r\n\r\nconst resourceName = GetCurrentResourceName()\r\n\r\nconst activeEvents = {};\r\nonNet(`__ox_cb_${resourceName}`, (key, ...args) => {\r\n    const resolve = activeEvents[key];\r\n    return resolve && resolve(...args);\r\n});\r\n\r\nexport function triggerClientCallback(eventName: string, playerId: string, ...args: any[]) {\r\n    let key: string;\r\n    do {\r\n        key = `${eventName}:${Math.floor(Math.random() * (100000 + 1))}:${playerId}`;\r\n    } while (activeEvents[key]);\r\n    emitNet(`__ox_cb_${eventName}`, playerId, resourceName, key, ...args);\r\n    return new Promise((resolve) => {\r\n        activeEvents[key] = resolve;\r\n    });\r\n}\r\n\r\nexport function onClientCallback(eventName: string, cb: (playerId: number, ...args: any[]) => any) {\r\n    onNet(`__ox_cb_${eventName}`, async (resource: string, key: string, ...args: any[]) => {\r\n        const src = source;\r\n        let response: any;\r\n\r\n        try {\r\n            response = await cb(src, ...args);\r\n        } catch (e: any) {\r\n            console.error(`an error occurred while handling callback event ${eventName} | Error: `, e.message);\r\n        }\r\n\r\n        emitNet(`__ox_cb_${resource}`, src, key, response);\r\n    });\r\n}\r\n", "type Query = string | number;\r\ntype Params = Record<string, unknown> | unknown[] | Function;\r\ntype Callback<T> = (result: T | null) => void;\r\n\r\ntype Transaction =\r\n  | string[]\r\n  | [string, Params][]\r\n  | { query: string; values: Params }[]\r\n  | { query: string; parameters: Params }[];\r\n\r\ninterface Result {\r\n  [column: string | number]: any;\r\n  affectedRows?: number;\r\n  fieldCount?: number;\r\n  info?: string;\r\n  insertId?: number;\r\n  serverStatus?: number;\r\n  warningStatus?: number;\r\n  changedRows?: number;\r\n}\r\n\r\ninterface Row {\r\n  [column: string | number]: unknown;\r\n}\r\n\r\ninterface OxMySQL {\r\n  store: (query: string) => void;\r\n  ready: (callback: () => void) => void;\r\n  query: <T = Result | null>(query: Query, params?: Params | Callback<T>, cb?: Callback<T>) => Promise<T>;\r\n  single: <T = Row | null>(\r\n    query: Query,\r\n    params?: Params | Callback<Exclude<T, []>>,\r\n    cb?: Callback<Exclude<T, []>>\r\n  ) => Promise<Exclude<T, []>>;\r\n  scalar: <T = unknown | null>(\r\n    query: Query,\r\n    params?: Params | Callback<Exclude<T, []>>,\r\n    cb?: Callback<Exclude<T, []>>\r\n  ) => Promise<Exclude<T, []>>;\r\n  update: <T = number | null>(query: Query, params?: Params | Callback<T>, cb?: Callback<T>) => Promise<T>;\r\n  insert: <T = number | null>(query: Query, params?: Params | Callback<T>, cb?: Callback<T>) => Promise<T>;\r\n  prepare: <T = any>(query: Query, params?: Params | Callback<T>, cb?: Callback<T>) => Promise<T>;\r\n  rawExecute: <T = Result | null>(query: Query, params?: Params | Callback<T>, cb?: Callback<T>) => Promise<T>;\r\n  transaction: (query: Transaction, params?: Params | Callback<boolean>, cb?: Callback<boolean>) => Promise<boolean>;\r\n  isReady: () => boolean;\r\n  awaitConnection: () => Promise<true>;\r\n}\r\n\r\nconst QueryStore: string[] = [];\r\n\r\nfunction assert(condition: boolean, message: string) {\r\n  if (!condition) throw new TypeError(message);\r\n}\r\n\r\nconst safeArgs = (query: Query | Transaction, params?: any, cb?: Function, transaction?: true) => {\r\n  if (typeof query === 'number') query = QueryStore[query];\r\n\r\n  if (transaction) {\r\n    assert(typeof query === 'object', `First argument expected object, recieved ${typeof query}`);\r\n  } else {\r\n    assert(typeof query === 'string', `First argument expected string, received ${typeof query}`);\r\n  }\r\n\r\n  if (params) {\r\n    const paramType = typeof params;\r\n    assert(\r\n      paramType === 'object' || paramType === 'function',\r\n      `Second argument expected object or function, received ${paramType}`\r\n    );\r\n\r\n    if (!cb && paramType === 'function') {\r\n      cb = params;\r\n      params = undefined;\r\n    }\r\n  }\r\n\r\n  if (cb !== undefined) assert(typeof cb === 'function', `Third argument expected function, received ${typeof cb}`);\r\n\r\n  return [query, params, cb];\r\n};\r\n\r\nconst exp = global.exports.oxmysql;\r\nconst currentResourceName = GetCurrentResourceName();\r\n\r\nfunction execute(method: string, query: Query | Transaction, params?: Params) {\r\n  return new Promise((resolve, reject) => {\r\n    exp[method](\r\n      query,\r\n      params,\r\n      (result, error) => {\r\n        if (error) return reject(error);\r\n        resolve(result);\r\n      },\r\n      currentResourceName,\r\n      true\r\n    );\r\n  }) as any;\r\n}\r\n\r\nexport const oxmysql: OxMySQL = {\r\n  store(query) {\r\n    assert(typeof query !== 'string', `Query expects a string, received ${typeof query}`);\r\n\r\n    return QueryStore.push(query);\r\n  },\r\n  ready(callback) {\r\n    setImmediate(async () => {\r\n      while (GetResourceState('oxmysql') !== 'started') await new Promise((resolve) => setTimeout(resolve, 50));\r\n      callback();\r\n    });\r\n  },\r\n  async query(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('query', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async single(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('single', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async scalar(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('scalar', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async update(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('update', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async insert(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('insert', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async prepare(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('prepare', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async rawExecute(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('rawExecute', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async transaction(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb, true);\r\n    const result = await execute('transaction', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  isReady() {\r\n    return exp.isReady();\r\n  },\r\n  async awaitConnection() {\r\n    return await exp.awaitConnection();\r\n  },\r\n};\r\n", "import { TAppearance } from '@typings/appearance';\nimport { oxmysql } from '@overextended/oxmysql';\n\nexport const saveAppearance = async (src: string | number, frameworkId: string, appearance: TAppearance) => {\n\tconst clothes = {\n\t\tdrawables: appearance.drawables,\n\t\tprops: appearance.props,\n\t\theadOverlay: appearance.headOverlay,\n\t};\n\n\tconst skin = {\n\t\theadBlend: appearance.headBlend,\n\t\theadStructure: appearance.headStructure,\n\t\thairColor: appearance.hairColor,\n\t\tmodel: appearance.model,\n\t};\n\n\tconst tattoos = appearance.tattoos || [];\n\n\tconst result = await oxmysql.prepare(\n\t\t'INSERT INTO appearance (id, clothes, skin, tattoos) VALUES (?, ?, ?, ?) ON DUPLICATE KEY UPDATE clothes = VALUES(clothes), skin = VALUES(skin), tattoos = VALUES(tattoos);',\n\t\t[\n\t\t\tframeworkId,\n\t\t\tJSON.stringify(clothes),\n\t\t\tJSON.stringify(skin),\n\t\t\tJSON.stringify(tattoos),\n\t\t]\n\t);\n\n\treturn result;\n}", "", "import { oxmysql } from '@overextended/oxmysql';\nimport { triggerClientCallback } from '../utils';\nimport { saveAppearance } from '../appearance';\nimport { TAppearance } from '@typings/appearance';\n\nconst delay = (ms: number) => new Promise(res => setTimeout(res, ms));\n\nconst migrate = async (src: string) => {\n    const response: any = await oxmysql.query('SELECT * FROM `players`');\n    if (!response) return;\n\n    for (const element of response) {\n        if (element.skin) {\n            await triggerClientCallback('bl_appearance:client:migration:setAppearance', src, {\n                type: 'fivem',\n                data: JSON.parse(element.skin)\n            }) as TAppearance\n            await delay(100);\n            const response = await triggerClientCallback('bl_appearance:client:getAppearance', src) as TAppearance\n            await saveAppearance(src, element.citizenid, response)\n        }\n    }\n    console.log('Converted '+ response.length + ' appearances')\n};\n\nexport default migrate", "import { oxmysql } from '@overextended/oxmysql';\nimport { triggerClientCallback } from '../utils';\nimport { saveAppearance } from '../appearance';\nimport { TAppearance } from '@typings/appearance';\n\nconst delay = (ms: number) => new Promise(res => setTimeout(res, ms));\n\nconst migrate = async (src: string) => {\n    const response: any = await oxmysql.query('SELECT * FROM `playerskins` WHERE active = 1`');\n    if (!response) return;\n\n    for (const element of response) {\n        if (element.skin) {\n            await triggerClientCallback('bl_appearance:client:migration:setAppearance', src, {\n                type: 'illenium',\n                data: JSON.parse(element.skin)\n            })\n            await delay(100);\n            const response = await triggerClientCallback('bl_appearance:client:getAppearance', src) as TAppearance\n            await saveAppearance(src, element.citizenid, response)\n        }\n    }\n    console.log('Converted '+ response.length + ' appearances')\n};\n\nexport default migrate", "import { oxmysql } from '@overextended/oxmysql';\nimport { triggerClientCallback } from '../utils';\nimport { saveAppearance } from '../appearance';\nimport { TAppearance } from '@typings/appearance';\n\nconst delay = (ms: number) => new Promise(res => setTimeout(res, ms));\n\nconst migrate = async (src: string) => {\n    const response: any = await oxmysql.query('SELECT * FROM `playerskins` WHERE active = 1');\n    if (!response) return;\n\n    for (const element of response) {\n        emitNet('qb-clothes:loadSkin', src, 0, element.model, element.skin);\n        await delay(200);\n        const response = await triggerClientCallback('bl_appearance:client:getAppearance', src) as TAppearance\n        await saveAppearance(src, element.citizenid, response)\n    }\n    console.log('Converted '+ response.length + ' appearances')\n};\n\nexport default migrate", "import { onClientCallback } from './utils';\r\nimport { oxmysql } from '@overextended/oxmysql';\r\nimport { Outfit } from '@typings/outfits';\r\nimport { saveAppearance } from './appearance';\r\nimport { SkinDB } from '@typings/appearance';\r\n\r\nonClientCallback('bl_appearance:server:getOutfits', async (src, frameworkId) => {\r\n\tlet response = await oxmysql.prepare(\r\n\t\t'SELECT * FROM outfits WHERE player_id = ?',\r\n\t\t[frameworkId]\r\n\t);\r\n\tif (!response) return [];\r\n\r\n\tif (!Array.isArray(response)) {\r\n\t\tresponse = [response];\r\n\t}\r\n\r\n\tconst outfits = response.map(\r\n\t\t(outfit: { id: number; label: string; outfit: string }) => {\r\n\t\t\treturn {\r\n\t\t\t\tid: outfit.id,\r\n\t\t\t\tlabel: outfit.label,\r\n\t\t\t\toutfit: JSON.parse(outfit.outfit),\r\n\t\t\t};\r\n\t\t}\r\n\t);\r\n\r\n\treturn outfits;\r\n});\r\n\r\nonClientCallback('bl_appearance:server:renameOutfit', async (src, frameworkId, data) => {\r\n\tconst id = data.id;\r\n\tconst label = data.label;\r\n\r\n\tconst result = await oxmysql.update(\r\n\t\t'UPDATE outfits SET label = ? WHERE player_id = ? AND id = ?',\r\n\t\t[label, frameworkId, id]\r\n\t);\r\n\treturn result;\r\n});\r\n\r\nonClientCallback('bl_appearance:server:deleteOutfit', async (src, frameworkId, id) => {\r\n\tconst result = await oxmysql.update(\r\n\t\t'DELETE FROM outfits WHERE player_id = ? AND id = ?',\r\n\t\t[frameworkId, id]\r\n\t);\r\n\treturn result > 0;\r\n});\r\n\r\nonClientCallback('bl_appearance:server:saveOutfit', async (src, frameworkId, data: Outfit) => {\r\n\tconst id = await oxmysql.insert(\r\n\t\t'INSERT INTO outfits (player_id, label, outfit) VALUES (?, ?, ?)',\r\n\t\t[frameworkId, data.label, JSON.stringify(data.outfit)]\r\n\t);\r\n\treturn id;\r\n});\r\n\r\nonClientCallback('bl_appearance:server:grabOutfit', async (src, id) => {\r\n\tconst response = await oxmysql.prepare(\r\n\t\t'SELECT outfit FROM outfits WHERE id = ?',\r\n\t\t[id]\r\n\t);\r\n\treturn JSON.parse(response);;\r\n});\r\n\r\nonClientCallback('bl_appearance:server:importOutfit', async (src, frameworkId, outfitId) => {\r\n    const [result] = await oxmysql.query(\r\n        'SELECT label, outfit FROM outfits WHERE id = ?',\r\n        [outfitId]\r\n    );\r\n\r\n    if (!result) {\r\n        return { success: false, message: 'Outfit not found' };\r\n    }\r\n\r\n    const newId = await oxmysql.insert(\r\n        'INSERT INTO outfits (player_id, label, outfit) VALUES (?, ?, ?)',\r\n        [frameworkId, `Imported Outfit ${outfitId}`, result.outfit]\r\n    );\r\n\r\n    return { success: true, id: newId };\r\n});\r\n\r\nonClientCallback('bl_appearance:server:saveSkin', async (src, frameworkId, skin) => {\r\n\tconst result = await oxmysql.update(\r\n\t\t'UPDATE appearance SET skin = ? WHERE id = ?',\r\n\t\t[JSON.stringify(skin), frameworkId]\r\n\t);\r\n\treturn result;\r\n});\r\n\r\nonClientCallback('bl_appearance:server:saveClothes', async (src, frameworkId, clothes) => {\r\n\t\tconst result = await oxmysql.update(\r\n\t\t\t'UPDATE appearance SET clothes = ? WHERE id = ?',\r\n\t\t\t[JSON.stringify(clothes), frameworkId]\r\n\t\t);\r\n\t\treturn result;\r\n\t}\r\n);\r\n\r\nonClientCallback('bl_appearance:server:saveAppearance', saveAppearance);\r\n\r\nonClientCallback('bl_appearance:server:saveTattoos', async (src, frameworkId, tattoos) => {\r\n\tconst result = await oxmysql.update(\r\n\t\t'UPDATE appearance SET tattoos = ? WHERE id = ?',\r\n\t\t[JSON.stringify(tattoos), frameworkId]\r\n\t);\r\n\treturn result;\r\n});\r\n\r\nonClientCallback('bl_appearance:server:getSkin', async (src, frameworkId) => {\r\n\tconst response = await oxmysql.prepare(\r\n\t\t'SELECT skin FROM appearance WHERE id = ?',\r\n\t\t[frameworkId]\r\n\t);\r\n\treturn JSON.parse(response);\r\n});\r\n\r\nonClientCallback('bl_appearance:server:getClothes', async (src, frameworkId) => {\r\n\tconst response = await oxmysql.prepare(\r\n\t\t'SELECT clothes FROM appearance WHERE id = ?',\r\n\t\t[frameworkId]\r\n\t);\r\n\treturn JSON.parse(response);\r\n});\r\n\r\nonClientCallback('bl_appearance:server:getTattoos', async (src, frameworkId) => {\r\n\tconst response = await oxmysql.prepare(\r\n\t\t'SELECT tattoos FROM appearance WHERE id = ?',\r\n\t\t[frameworkId]\r\n\t);\r\n\treturn JSON.parse(response) || [];\r\n});\r\n\r\nonClientCallback('bl_appearance:server:getAppearance', async (src, frameworkId) => {\r\n\tconst response: SkinDB = await oxmysql.single(\r\n\t\t'SELECT * FROM appearance WHERE id = ? LIMIT 1',\r\n\t\t[frameworkId]\r\n\t);\r\n\tif (!response) return null;\r\n\tlet appearance = {\r\n\t\t...JSON.parse(response.skin),\r\n\t\t...JSON.parse(response.clothes),\r\n\t\t...JSON.parse(response.tattoos),\r\n\t}\r\n\tappearance.id = response.id\r\n\treturn appearance;\r\n});\r\n\r\nonNet('bl_appearance:server:setroutingbucket', () => {\r\n\tSetPlayerRoutingBucket(source.toString(), source)\r\n});\r\n\r\nonNet('bl_appearance:server:resetroutingbucket', () => {\r\n\tSetPlayerRoutingBucket(source.toString(), 0)\r\n});\r\n\r\n\r\nRegisterCommand('migrate', async (source: number) => {\r\n\tsource = source !== 0 ? source : parseInt(getPlayers()[0])\r\n\tconst bl_appearance = exports.bl_appearance;\r\n\tconst config = bl_appearance.config();\r\n\tconst importedModule = await import(`./migrate/${config.previousClothing === 'fivem-appearance' ? 'fivem' : config.previousClothing}.ts`)\r\n\timportedModule.default(source)\r\n}, false)\r\n\r\noxmysql.ready(() => {\r\n\toxmysql.query(`CREATE TABLE IF NOT EXISTS appearance (\r\n\t\tid varchar(100) NOT NULL,\r\n\t\tskin longtext DEFAULT NULL,\r\n\t\tclothes longtext DEFAULT NULL,\r\n\t\ttattoos  longtext DEFAULT NULL,\r\n\t\tPRIMARY KEY (id)\r\n\t) ENGINE=InnoDB DEFAULT CHARSET=utf8;`)\r\n\t\r\n\toxmysql.query(`CREATE TABLE IF NOT EXISTS outfits (\r\n\t\tid int NOT NULL AUTO_INCREMENT,\r\n\t\tplayer_id varchar(100) NOT NULL,\r\n\t\tlabel varchar(100) NOT NULL,\r\n\t\toutfit longtext DEFAULT NULL,\r\n\t\tPRIMARY KEY (id)\r\n\t) ENGINE=InnoDB DEFAULT CHARSET=utf8;`)\r\n})\r\n"],
  "mappings": "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",
  "names": ["exports", "import_oxmysql", "response", "import_oxmysql", "delay", "migrate", "response", "import_oxmysql", "delay", "migrate", "response", "import_oxmysql", "source"]
}
