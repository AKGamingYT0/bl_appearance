{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/@overextended+oxmysql@1.3.0/node_modules/@overextended/oxmysql/MySQL.ts", "../../src/server/utils/index.ts", "../../src/server/init.ts"],
  "sourcesContent": ["type Query = string | number;\r\ntype Params = Record<string, unknown> | unknown[] | Function;\r\ntype Callback<T> = (result: T | null) => void;\r\n\r\ntype Transaction =\r\n  | string[]\r\n  | [string, Params][]\r\n  | { query: string; values: Params }[]\r\n  | { query: string; parameters: Params }[];\r\n\r\ninterface Result {\r\n  [column: string | number]: any;\r\n  affectedRows?: number;\r\n  fieldCount?: number;\r\n  info?: string;\r\n  insertId?: number;\r\n  serverStatus?: number;\r\n  warningStatus?: number;\r\n  changedRows?: number;\r\n}\r\n\r\ninterface Row {\r\n  [column: string | number]: unknown;\r\n}\r\n\r\ninterface OxMySQL {\r\n  store: (query: string) => void;\r\n  ready: (callback: () => void) => void;\r\n  query: <T = Result | null>(query: Query, params?: Params | Callback<T>, cb?: Callback<T>) => Promise<T>;\r\n  single: <T = Row | null>(\r\n    query: Query,\r\n    params?: Params | Callback<Exclude<T, []>>,\r\n    cb?: Callback<Exclude<T, []>>\r\n  ) => Promise<Exclude<T, []>>;\r\n  scalar: <T = unknown | null>(\r\n    query: Query,\r\n    params?: Params | Callback<Exclude<T, []>>,\r\n    cb?: Callback<Exclude<T, []>>\r\n  ) => Promise<Exclude<T, []>>;\r\n  update: <T = number | null>(query: Query, params?: Params | Callback<T>, cb?: Callback<T>) => Promise<T>;\r\n  insert: <T = number | null>(query: Query, params?: Params | Callback<T>, cb?: Callback<T>) => Promise<T>;\r\n  prepare: <T = any>(query: Query, params?: Params | Callback<T>, cb?: Callback<T>) => Promise<T>;\r\n  rawExecute: <T = Result | null>(query: Query, params?: Params | Callback<T>, cb?: Callback<T>) => Promise<T>;\r\n  transaction: (query: Transaction, params?: Params | Callback<boolean>, cb?: Callback<boolean>) => Promise<boolean>;\r\n  isReady: () => boolean;\r\n  awaitConnection: () => Promise<true>;\r\n}\r\n\r\nconst QueryStore: string[] = [];\r\n\r\nfunction assert(condition: boolean, message: string) {\r\n  if (!condition) throw new TypeError(message);\r\n}\r\n\r\nconst safeArgs = (query: Query | Transaction, params?: any, cb?: Function, transaction?: true) => {\r\n  if (typeof query === 'number') query = QueryStore[query];\r\n\r\n  if (transaction) {\r\n    assert(typeof query === 'object', `First argument expected object, recieved ${typeof query}`);\r\n  } else {\r\n    assert(typeof query === 'string', `First argument expected string, received ${typeof query}`);\r\n  }\r\n\r\n  if (params) {\r\n    const paramType = typeof params;\r\n    assert(\r\n      paramType === 'object' || paramType === 'function',\r\n      `Second argument expected object or function, received ${paramType}`\r\n    );\r\n\r\n    if (!cb && paramType === 'function') {\r\n      cb = params;\r\n      params = undefined;\r\n    }\r\n  }\r\n\r\n  if (cb !== undefined) assert(typeof cb === 'function', `Third argument expected function, received ${typeof cb}`);\r\n\r\n  return [query, params, cb];\r\n};\r\n\r\nconst exp = global.exports.oxmysql;\r\nconst currentResourceName = GetCurrentResourceName();\r\n\r\nfunction execute(method: string, query: Query | Transaction, params?: Params) {\r\n  return new Promise((resolve, reject) => {\r\n    exp[method](\r\n      query,\r\n      params,\r\n      (result, error) => {\r\n        if (error) return reject(error);\r\n        resolve(result);\r\n      },\r\n      currentResourceName,\r\n      true\r\n    );\r\n  }) as any;\r\n}\r\n\r\nexport const oxmysql: OxMySQL = {\r\n  store(query) {\r\n    assert(typeof query !== 'string', `Query expects a string, received ${typeof query}`);\r\n\r\n    return QueryStore.push(query);\r\n  },\r\n  ready(callback) {\r\n    setImmediate(async () => {\r\n      while (GetResourceState('oxmysql') !== 'started') await new Promise((resolve) => setTimeout(resolve, 50));\r\n      callback();\r\n    });\r\n  },\r\n  async query(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('query', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async single(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('single', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async scalar(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('scalar', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async update(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('update', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async insert(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('insert', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async prepare(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('prepare', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async rawExecute(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb);\r\n    const result = await execute('rawExecute', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  async transaction(query, params, cb) {\r\n    [query, params, cb] = safeArgs(query, params, cb, true);\r\n    const result = await execute('transaction', query, params);\r\n    return cb ? cb(result) : result;\r\n  },\r\n  isReady() {\r\n    return exp.isReady();\r\n  },\r\n  async awaitConnection() {\r\n    return await exp.awaitConnection();\r\n  },\r\n};\r\n", "//https://github.com/overextended/ox_lib/blob/master/package/server/resource/callback/index.ts\r\n\r\nexport function onClientCallback(eventName: string, cb: (playerId: number, ...args: any[]) => any) {\r\n    onNet(`__ox_cb_${eventName}`, async (resource: string, key: string, ...args: any[]) => {\r\n        const src = source;\r\n        let response: any;\r\n\r\n        try {\r\n            response = await cb(src, ...args);\r\n        } catch (e: any) {\r\n            console.error(`an error occurred while handling callback event ${eventName}`);\r\n        }\r\n\r\n        emitNet(`__ox_cb_${resource}`, src, key, response);\r\n    });\r\n}\r\n", "import {onClientCallback} from './utils'\r\nimport { oxmysql } from '@overextended/oxmysql'\r\nimport { Outfit } from '@dataTypes/outfits';\r\n\r\nonNet('bl_appearance:server:saveAppearances', async (data: any) => {\r\n  const src = source;\r\n  const id = data.id ? data.id : GetPlayerIdentifierByType(src, 'license')\r\n\r\n  const saveData = [JSON.stringify(data.skin), JSON.stringify(data.clothes), JSON.stringify(data.tattoos), id]\r\n\r\n  const affectedRows = await oxmysql.update('UPDATE bl_appearance SET skin = ?, clothes = ?, tattoos = ? WHERE id = ?', saveData)\r\n  if (affectedRows === 0) oxmysql.insert('INSERT INTO `bl_appearance` (skin, clothes, tattoos, id) VALUES (?, ?, ?, ?)', saveData, (id) => {\r\n    console.log(id)\r\n  })\r\n})\r\n\r\nonNet('bl_appearance:server:saveOutfit', async (data: Outfit) => {\r\n  try {\r\n    const src = source;\r\n    const id = data.id || GetPlayerIdentifierByType(src, 'license');\r\n\r\n    let outfitsJson = await oxmysql.scalar('SELECT `outfits` FROM `bl_appearance` WHERE `id` = ? LIMIT 1', [id]) as string;\r\n\r\n    let outfits: Outfit[] = outfitsJson ? JSON.parse(outfitsJson) : [];\r\n\r\n    outfits.push({ label: data.label, outfit: data.outfit });\r\n\r\n    outfitsJson = JSON.stringify(outfits);\r\n\r\n    const affectedRows = await oxmysql.update('UPDATE bl_appearance SET outfits = ? WHERE id = ?', [outfitsJson, id]);\r\n\r\n    if (affectedRows === 0) {\r\n      const newId = await oxmysql.insert('INSERT INTO `bl_appearance` (outfits, id) VALUES (?, ?)', [outfitsJson, id]);\r\n      console.log('Inserted new record with ID:', newId);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error saving outfit:', error);\r\n  }\r\n});\r\n\r\nonClientCallback('bl_appearance:server:getTattoos&Outfits', async (playerId, id: number | string) => {\r\n  const response = await oxmysql.prepare('SELECT `tattoos`, `outfits` FROM `bl_appearance` WHERE `id` = ?', [id])\r\n  return {\r\n    tattoos: JSON.parse(response.tattoos),\r\n    outfits: JSON.parse(response.outfits)\r\n  }\r\n});\r\n"],
  "mappings": "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",
  "names": ["id"]
}
